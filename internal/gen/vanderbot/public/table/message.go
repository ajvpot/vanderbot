//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Message = newMessageTable("public", "message", "")

type messageTable struct {
	postgres.Table

	// Columns
	Blob      postgres.ColumnString
	CreatedAt postgres.ColumnString
	EditedAt  postgres.ColumnString
	MessageID postgres.ColumnString
	ChannelID postgres.ColumnString
	GuildID   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MessageTable struct {
	messageTable

	EXCLUDED messageTable
}

// AS creates new MessageTable with assigned alias
func (a MessageTable) AS(alias string) *MessageTable {
	return newMessageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MessageTable with assigned schema name
func (a MessageTable) FromSchema(schemaName string) *MessageTable {
	return newMessageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MessageTable with assigned table prefix
func (a MessageTable) WithPrefix(prefix string) *MessageTable {
	return newMessageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MessageTable with assigned table suffix
func (a MessageTable) WithSuffix(suffix string) *MessageTable {
	return newMessageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMessageTable(schemaName, tableName, alias string) *MessageTable {
	return &MessageTable{
		messageTable: newMessageTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newMessageTableImpl("", "excluded", ""),
	}
}

func newMessageTableImpl(schemaName, tableName, alias string) messageTable {
	var (
		BlobColumn      = postgres.StringColumn("blob")
		CreatedAtColumn = postgres.StringColumn("created_at")
		EditedAtColumn  = postgres.StringColumn("edited_at")
		MessageIDColumn = postgres.StringColumn("message_id")
		ChannelIDColumn = postgres.StringColumn("channel_id")
		GuildIDColumn   = postgres.StringColumn("guild_id")
		allColumns      = postgres.ColumnList{BlobColumn, CreatedAtColumn, EditedAtColumn, MessageIDColumn, ChannelIDColumn, GuildIDColumn}
		mutableColumns  = postgres.ColumnList{BlobColumn}
	)

	return messageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Blob:      BlobColumn,
		CreatedAt: CreatedAtColumn,
		EditedAt:  EditedAtColumn,
		MessageID: MessageIDColumn,
		ChannelID: ChannelIDColumn,
		GuildID:   GuildIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
